Python

#desafio 73, 76, 80 e 83

Importar bibliotecas

import biblioteca  importa todas as funções da bibliotecas

from biblioteca import func1, func2  importa somente as funções selecionadas de uma dada biblioteca

print(f'Na posição {p} encontrei o valor {v:.2f}', end='') # usado o f na frente para formatar como uma fstring e o end='' no final para poder emendar um texto no outro
print('-' * 20) # imprime 20 vezes - na tela

help(funcao) # traz todas as informações da função informada

a += b # abreviação para a = a + b

NumImagi = 5j #Declaração de numeros imaginários

set() # parecido com uma lista mas que não permite elementos iguais


if lógica:
	comando
else:
	comando

if lógica:
	comando	
elif lógica:
	comando

#for
for c in range(0, 10)
	comando

for c in lista:
	comando

for pos, c in enumerate(c)
	comando

for _, b in c: # o _ é quando indice é descartável e será usado apenas para avançar no range, lista etc .
	comando	

for c in range(1,10):
	if c == x
		break		# break também funciona em for

#ranges
for x in range(11): # vai de 0 a 10 pois o ultimo numero do range é sempre vf-1
	pass

for x in range(1,11): # vai de 1 a 10 pois o ultimo numero do range é sempre vf-1
	pass

for x in range(1,10, 2): # vai de 1 a 10 pulando de 2 em 2 
	pass

for x in xrange(10, 0, -1): # vai de 10 até 1 de maneira regressiva
	pass

list = list(range(10)) # criando uma lista de valores de 0 até 9

#while
while (lógica):		# enquanto a lógica for verdadeira ele mantem o while
	comando

while lógica:   
	comando
	break     #sai do while 


#tuplas
tupla = (a, b, c, d)  #tuplas são imutaveis e são indicadas por () parenteses
print(sorted(tupla))  #traz em odem alfabética ou do menor para o maior
del(tupla) #deleta tupla


#listas
lista = [a, b, c, d] # listas são mutaveis e indicadas por []
lista.append(f) # adiciona um unico elemento a lista
lista.extend([e, f, g, h])  # inclui mais de um item na lista
lista.insert(0, aa) # insere o valor no index indicado 
lista.sort() # traz em odem alfabética ou do menor para o maior
lista.sort(reverse=True) # traz do maior para o menor
len(lista) # numero de elementos na lista

	#como inputar valores manualmente em uma lista
valores = list()
for cont in range(0, 5)
	valores.append(int(input('Digite um valor: ')))


listaC = listaB # cria uma ligação entre as duas listas, as duas terão os mesmos valores e o que for alterada em uma será alterada em outra
listaC = listaB[:] # apenas copia os valores da listaB para a listaC, mas neste caso as duas são idependentes uma da outra sem a ligação feita na linha de cima

	# maneiras de retirar um elemento da lista
lanche.pop() #remove o ultimo item da lisra
lanche.pop(3) # remove o elemento c da lista
del lanche # deleta lista
del lanche[3] # remove o elemento c desta lista
lanche.remove('c') # remove o elemento c da lista
if 'c' in lanche
	lanche.remove('c')

sLista = ' '.join(listaC) # Cria uma string com os elementos separados pelo que esta nas aspas simples


#dicionários
dicionario = {'nome': 'a', 'sexo': 'b', 'rua': 'c', 'numero': 25}
dicionario[cidade] = 'd' #adiciona um item ao dicionário
del dicionario[sexo] # deleta o item do dicionário

dicionario = {'nome': 'a',
			  'sexo': 'b',
			  'rua': 'c',
			  'numero': 25	
			 }
dicionario.values() # pega os valores de declarados nas keys (a, b, c, 25)
dicionario.keys() # pega os nomes das keys (nome, sexo, rua, numero)
dicionario.items() # traz as keys e seus respectivos valores em seguida ('nome': 'a', 'sexo': 'b', 'rua': 'c', 'numero': 25)

for k,v in filme.items():
	print(f'O {k} é {v}')

lista.append(dicionario) #adiciona ao dicionário dentro de uma lista
lista.append(dicionario.copy()) # copia o dicionário para dentro da lista de maneira que não cria ligação com as proximas alterações do mesmo dicionário

from operetor import itemgetter # função de uma librarie que organiza um dicionário do menor para o maior
dicorg = sorted(dicionario.items(), key=itemgetter(1), reverse=True)

# funções
def funcao(a, b, c, d=0):  # d=0 parametro opcional
	""" Doc string """  # Informações da função na função helṕ()
	global x	# Comando para o programa usar e alterar a variavel global x, variaveis globais são as de fora da função

	x = a + b + c + d

	return 


bibliotecas

math - operações matematicas mais complexas e especificas 



Site interessante:

https://pygobject.readthedocs.io/en/latest/getting_started.html#fedora-getting-started


https://pythonacademy.com.br/blog/desenvolva-aplicativos-para-android-ios-com-python-e-kivy


https://hackernoon.com/50-popular-python-open-source-projects-on-github-in-2018-c750f9bf56a0
https://medium.mybridge.co/36-amazing-python-open-source-projects-v-2019-2fe058d79450
https://medium.mybridge.co/34-amazing-python-open-source-libraries-for-the-past-year-v-2019-93d6ee11aceb


Web

request > urls > view > model > response





    # print('-=' * 30)
    # print(f'Término dos inputs = {Uws}')
    # for k, v in dgServ.items():
    #     if k != 'nserv':
    #         print(f'{k}: {v}')
    # print(' ' * 30)


    
    # print('Término dos tics')
    # for k, v in dgServ.items():
    #     if k != 'nserv':
    #         print(f'{k}: {v}')
    # print(' ' * 30)